#pragma kernel ComputeDensityPressure
#pragma kernel ComputeForces
#pragma kernel Integrate
#pragma kernel ComputeColliders

struct SPHParticle
{
    float3 position;
    float3 velocity;
    float3 force;
    float density;
    float pressure;
};

struct SPHCollider
{
    float3 position;
    float3 right;
    float3 up;
    float2 scale;
};

shared RWStructuredBuffer<SPHParticle> particles;
shared StructuredBuffer<SPHCollider> colliders;

//Passed from SPHFluid.cs
int particleCount;
int colliderCount;
float smoothingRadius;
float smoothingRadiusSq;
float gas;
float restDensity;
float mass;
float radius;
float particleDrag;
float particleViscosity;
float damping;
float deltaTime;
float4 gravity;

float3 penetrationNormal;
float penetrationLength;
float3 penetrationPosition;

#define PI 3.1415926536
#define PARTICLETHREADCOUNT 128

bool Intersect(SPHCollider collider, float3 position){
    float3 colliderProjection = collider.position - position;

    penetrationNormal = cross(collider.right, collider.up);
    penetrationLength = abs(dot(colliderProjection, penetrationNormal)) - (radius / 2.0);
    penetrationPosition = position;

    return penetrationLength < 0.0
        && abs(dot(colliderProjection, collider.right)) < collider.scale.x
        && abs(dot(colliderProjection, collider.up)) < collider.scale.y;
}

float3 DampVelocity(SPHCollider collider, float3 velocity, float drag)
{
    float3 newVelocity = dot(velocity, penetrationNormal) * penetrationNormal * damping
                    + dot(velocity, collider.right) * collider.right * drag
                    + dot(velocity, collider.up) * collider.up * drag;

    float3 forward = float3(0,0,1);
    float3 right = float3(1,0,0);
    float3 up = float3(0,1,0);

    return dot(newVelocity, forward) * forward
            + dot(newVelocity, right) * right
            + dot(newVelocity, up) * up;
}

[numthreads(PARTICLETHREADCOUNT,1,1)]
void ComputeDensityPressure (uint3 id : SV_DispatchThreadID)
{
    SPHParticle particle = particles[id.x];

    particle.density = 0.0f;

    for (int j = 0; j < particleCount; j++)
    {
        float3 relativePosition = particles[j].position - particle.position;
        float rP2 = dot(relativePosition, relativePosition);

        if (rP2 < smoothingRadiusSq)
        {
            particle.density += mass * (315.0f / (64.0f * PI * pow(smoothingRadius, 9.0f))) * pow(smoothingRadiusSq - rP2, 3.0f);
        }
    }

    particle.pressure = gas * (particle.density - restDensity);

    particles[id.x] = particle;
}

[numthreads(PARTICLETHREADCOUNT,1,1)]
void ComputeForces (uint3 id : SV_DispatchThreadID)
{
    float3 forcePressure = 0;
    float3 forceViscosity = 0;
    SPHParticle particle = particles[id.x];

    for (int j = 0; j < particleCount; j++)
    {
        if (id.x == (uint)j) continue;

        SPHParticle particleJ = particles[j];

        float3 relativePosition = particleJ.position - particle.position;
        float rP2 = dot(relativePosition, relativePosition);
        
        if (rP2 < smoothingRadiusSq)
        {
            float r = length(relativePosition);
            float3 rPN = normalize(relativePosition);

            forcePressure += -rPN * mass * (particle.pressure + particleJ.pressure) / (2.0f * particleJ.density) * (-45.0f / (PI * pow(smoothingRadius, 6.0f))) * pow(smoothingRadius - r, 2.0f);
            forceViscosity += particleViscosity * mass * (particleJ.velocity - particle.velocity) / particleJ.density * (45.0f / (PI * pow(smoothingRadius, 6.0f))) * (smoothingRadius - r);
        }
    }

    float3 forceGravity = gravity.xyz * particle.density * gravity.w;

    particle.force = forcePressure + forceViscosity + forceGravity;

    particles[id.x] = particle;
}

[numthreads(PARTICLETHREADCOUNT,1,1)]
void Integrate (uint3 id : SV_DispatchThreadID)
{
    SPHParticle particle = particles[id.x];

    particle.velocity += deltaTime * particle.force / particle.density;
    particle.position += deltaTime * particle.velocity;

    particles[id.x] = particle;
}

[numthreads(PARTICLETHREADCOUNT,1,1)]
void ComputeColliders (uint3 id : SV_DispatchThreadID)
{
    SPHParticle particle = particles[id.x];
    
    for (int i = 0; i < colliderCount; i++)
    {
        SPHCollider collider = colliders[i];

        if (Intersect(collider, particle.position))
        {
            particle.velocity = DampVelocity(collider, particle.velocity, 1.0f - particleDrag);
            particle.position = penetrationPosition - penetrationNormal * abs(penetrationLength);
        }
    }

    particles[id.x] = particle;
}
