#pragma kernel MoveParticles
#pragma kernel March

#include "/includes/MarchingTables.cginc"

static const int numThreads = 6;

struct Triangle {
    float3 vertexC;
    float3 vertexB;
    float3 vertexA;
};

AppendStructuredBuffer<Triangle> triangles;
shared RWStructuredBuffer<float4> particles;

int3 gridDimensions;
float voxelSize;
float particleRadius;
int particleCount;
float4 halfBoundsSize;
float time;

[numthreads(numThreads,1,1)]
void MoveParticles (int3 id : SV_DispatchThreadID)
{
    if (id.x>=particleCount) return;

    float4 particle = particles[id.x];

    particle.x = sin(time + particle.w);

    particles[id.x] = particle;
}

float3 interpolateVerts(float4 v1, float4 v2) {
    float t = (1 - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz-v1.xyz);
}

float4 pointFromCoord(int x, int y, int z) {
    float3 position = float3(x,y,z) * voxelSize - halfBoundsSize.xyz;
    int outside = 1;

    for(int i=0; i<particleCount; i++){
        float3 relativePosition = particles[i].xyz - position;
        if (length(relativePosition)<particleRadius){
            outside = 0;
        }
    }
    
    return float4(position, outside);
}

[numthreads(numThreads,numThreads,numThreads)]
void March(int3 id : SV_DispatchThreadID)
{   
    // Stop one point before the end because voxel includes neighbouring points
    if (id.x >= gridDimensions.x-1 || id.y >= gridDimensions.y-1 || id.z >= gridDimensions.z-1) {
        return;
    }

    // 8 corners of the current cube
    float4 cubeCorners[8] = {
        pointFromCoord(id.x, id.y, id.z),
        pointFromCoord(id.x + 1, id.y, id.z),
        pointFromCoord(id.x + 1, id.y, id.z + 1),
        pointFromCoord(id.x, id.y, id.z + 1),
        pointFromCoord(id.x, id.y + 1, id.z),
        pointFromCoord(id.x + 1, id.y + 1, id.z),
        pointFromCoord(id.x + 1, id.y + 1, id.z + 1),
        pointFromCoord(id.x, id.y + 1, id.z + 1)
    };

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cubeCorners[0].w < 1) cubeIndex |= 1;
    if (cubeCorners[1].w < 1) cubeIndex |= 2;
    if (cubeCorners[2].w < 1) cubeIndex |= 4;
    if (cubeCorners[3].w < 1) cubeIndex |= 8;
    if (cubeCorners[4].w < 1) cubeIndex |= 16;
    if (cubeCorners[5].w < 1) cubeIndex |= 32;
    if (cubeCorners[6].w < 1) cubeIndex |= 64;
    if (cubeCorners[7].w < 1) cubeIndex |= 128;

    // Create triangles for current cube configuration
    for (int i = 0; triangulation[cubeIndex][i] != -1; i +=3) {
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i+1]];
        int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i+1]];

        int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i+2]];
        int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i+2]];

        Triangle tri;
        tri.vertexC = interpolateVerts(cubeCorners[a0], cubeCorners[b0]);
        tri.vertexB = interpolateVerts(cubeCorners[a1], cubeCorners[b1]);
        tri.vertexA = interpolateVerts(cubeCorners[a2], cubeCorners[b2]);
        triangles.Append(tri);
    }


}

